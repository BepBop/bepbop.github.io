---
import productList from "../../content/projects-list.json";

export async function getStaticPaths() {
  return productList.map((product) => ({
    params: { name: product.title.toString() },
    props: { title: product.title },
  }));
}

const { name } = Astro.params;
const { Index, Description } = await import(`../../content/${name}.js`);
---

<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>{Index["Project Overview"].Name}</title>
    <link rel="stylesheet" href="/css/Root.css" />
    <style>
      :root {
        --timing: 0.42s;
        --ease: linear(
          0 0%,
          0.0036 9.62%,
          0.0185 16.66%,
          0.0489 23.03%,
          0.0962 28.86%,
          0.1705 34.93%,
          0.269 40.66%,
          0.3867 45.89%,
          0.5833 52.95%,
          0.683 57.05%,
          0.7829 62.14%,
          0.8621 67.46%,
          0.8991 70.68%,
          0.9299 74.03%,
          0.9545 77.52%,
          0.9735 81.21%,
          0.9865 85%,
          0.9949 89.15%,
          1 100%
        );
      }

      body {
        margin: 0;
        padding: 0;
        background: black;
        display: flex;
        font-family: var(--font-sans);
        height: 100vh;
      }

      .text-wrapper {
        flex-basis: 100%;
        overflow: scroll;
        text-wrap: balance;
        color: var(--white);

        & .meta-data {
          font-size: var(--font-size-5);
          font-family: var(--font-mono);
          margin-bottom: 32px;
        }

        & .label {
          font-family: var(--font-sans);
          font-size: var(--font-size-9);
          font-weight: 500;
          color: var(--green);
          margin-bottom: 8px;
        }

        & li {
          font-size: var(--font-size-5);
          margin-bottom: 8px;
          font-family: var(--font-mono);

          &:last-child {
            margin-bottom: 0;
          }
        }
      }

      .main-container {
        padding: 32px;
        border-left: 1px rgba(255, 255, 255, 0.1) solid;
        background: rgba(255, 255, 255, 0.08);
        color: rgba(255, 255, 255, 0.76);
        overflow: scroll;
        popover-open: none;

        & .section,
        & .subsection {
          margin-bottom: 32px;
          animation: fadeIn 0.4s ease-out forwards;

          &:last-child {
            margin-bottom: 0;
          }
        }

        & .title {
          font-size: var(--font-size-10);
          font-weight: 500;
          margin-bottom: 24px;
          transition: transform 0.3s ease;

          &:hover {
            color: var(--white);
            transform: translateX(4px);
            cursor: pointer;
          }
        }

        & .subtitle {
          font-size: var(--font-size-8);
          margin-bottom: 8px;
          transition: transform 0.3s ease;

          &:hover {
            color: var(--white);
            transform: translateX(4px);
            cursor: pointer;
          }
        }

        & .paragraph {
          font-size: var(--font-size-3);
          line-height: 1.6;
          margin-bottom: 16px;
          //display: -webkit-box;
          //-webkit-box-orient: vertical;
          //-webkit-line-clamp: 2;
          //overflow: hidden;
          text-wrap: pretty;
        }

        & ul {
          font-size: var(--font-size-3);
          line-height: 1.4;
          margin: 0;
          padding-left: 16px;

          & li {
            margin-bottom: 8px;

            &:last-child {
              margin-bottom: 0;
            }
          }
        }
      }

      .toggle-button {
        display: none;
      }

      @keyframes fadeIn {
        from {
          opacity: 0;
          transform: translateY(20px);
        }
        to {
          opacity: 1;
          transform: translateY(0);
        }
      }

      .section:nth-child(n),
      .subsection:nth-child(n) {
        animation-delay: calc(0.1s * var(--n));
      }

      @media (width > 800px) {
        #mainContent {
          display: block !important;
          height: auto !important;
          position: static !important;
          margin: 0 !important;
          padding: 40px !important;
          border: none !important;
          border-left: 1px rgba(255, 255, 255, 0.1) solid !important;
        }
      }

      @media (width <= 800px) {
        .layout {
          flex-direction: column;
        }

        .main-container {
          position: fixed;
          bottom: 0;
          left: 0;
          right: 0;
          max-height: 80vh;
          overflow-y: auto;
          background: #171616;
          popover: auto;

          &[popover] {
            margin: auto;
            width: calc(64%);
            border: none;
            border-radius: 4px;
            box-shadow:
              rgba(50, 50, 93, 0.25) 0px 13px 27px -5px,
              rgba(0, 0, 0, 0.3) 0px 8px 16px -8px;
          }

          &[popover]::backdrop {
            background: rgba(0, 0, 0, 0.75);
            backdrop-filter: grayscale(1);
          }
        }

        .toggle-button {
          /* Positioning */
          position: fixed;
          bottom: 24px;
          right: 24px;
          z-index: 1000;

          /* Display & Size */
          display: block;
          font-size: var(--font-size-4);
          padding: 12px 24px;

          /* Visual Style */
          background-color: #ffffff;
          color: #000000;
          border: 1px solid rgba(0, 0, 0, 0.1);
          border-radius: 24px;
          box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);

          /* Interaction */
          cursor: pointer;
          transition: all 0.2s ease-in-out;
          popovertarget: mainContent;

          /* States */
          &:hover {
            background-color: #f5f5f5;
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
          }

          &:active {
            transform: translateY(0);
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
          }

          &:not(:defined) {
            display: none;
          }
        }
      }
    </style>
  </head>
  <body>
    <div class="text-wrapper margin">
      {
        Object.entries(Description).map(([key, value]) => (
          <div>
            <div class="label">{key}</div>
            {typeof value === "object" ? (
              Object.keys(value).map((k) => (
                <li>
                  {k}: {value[k]}
                </li>
              ))
            ) : (
              <div class="meta-data">{value}</div>
            )}
          </div>
        ))
      }
    </div>
    <div class="main-container" id="mainContent" popover="auto">
      {
        Object.entries(Index).map(([key, value], index) => (
          <div class="section" style={{ "--n": index + 1 }} key={key}>
            <div class="title">{key}</div>
            {typeof value === "object" && value !== null ? (
              Object.entries(value).map(
                ([nestedKey, nestedValue], nestedIndex) => (
                  <div
                    class="subsection"
                    style={{ "--n": nestedIndex + 1 }}
                    key={nestedKey}
                  >
                    <div class="subtitle">{nestedKey}</div>
                    {typeof nestedValue === "object" && nestedValue !== null ? (
                      <ul>
                        {Object.keys(nestedValue).map((deepKey) => (
                          <li key={deepKey}>{deepKey}</li>
                        ))}
                      </ul>
                    ) : (
                      <div class="paragraph">{nestedValue}</div>
                    )}
                  </div>
                ),
              )
            ) : (
              <div class="subtitle">{value}</div>
            )}
          </div>
        ))
      }
    </div>
    <button class="toggle-button" popovertarget="mainContent"> Index</button>
  </body>
</html>
