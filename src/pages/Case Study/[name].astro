---
import productList from "../../content/projects-list.json";
import {ClientRouter} from "astro:transitions";

export async function getStaticPaths() {
    return productList.map((product) => ({
        params: {name: product.title.toString()},
        props: {thumbnail: product.thumbnail},
    }));
}

const {name} = Astro.params;
const {thumbnail} = Astro.props;
const {Index, Description, DesignProcess, Features} = await import(
    `../../content/${name}.js`
    );
---

<html lang="en">
<head>
    <meta charset="UTF-8"/>
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
    <title>{Index["Overview"].Name}</title>
    <link rel="stylesheet" href="/css/Root.css"/>

    <!-- Icons -->
    <link rel="shortcut icon" type="image/svg+xml" href="/icon.svg" />
    <link rel="apple-touch-icon" href="/icon.svg" />



    <ClientRouter/>

    <style define:vars={{ image: `url("/thumbnail/${thumbnail}")` }} >

        body {
            margin: 0;
            padding: 0;
            display: flex;
            height: 100vh;
            overflow: clip;
            justify-content: space-between;
            flex-direction: row;
            //background: rgba(0, 0, 0, 0.94);
            //background-blend-mode: overlay;
            //background-color: black;
            background: black;
            gap: 4rem;
        }

        @keyframes scroll {
            0% {
                width: 4vw;
            }
            100% {
                width: 100vw;
            }
        }

        .green {
            position: fixed;
            top: 0;
            left: 0;
            z-index: 1;
            width: 4vw;
            height: 12px;
            background: var(--green);
            animation: scroll linear;
            animation-timeline: --page-scroll;
        }

        .back-button {
            all: unset;
            position: fixed;
            z-index: 2;

            left: 2rem;
            width: 44px;
            height: 44px;
            border: 2px solid rgb(16, 16, 17);
            background: var(--dark);
            cursor: pointer;
            transition: 0.2s ease;
            color: rgba(255, 255, 255, 0.48);

            display: flex;
            justify-content: center;
            align-items: center;

            box-shadow: 0 4px 12px 0 hsla(0, 0%, 10%, 0.1);
            border-radius: 8px;


            & svg {
                width: 28px;
                height: 28px;
                stroke: currentColor;
                stroke-width: 2.5;
                fill: none;
            }

            &:hover {
                background-color: var(--white);
                color: var(--black3);
            }

            &:active {

            }

            @media (max-width: 1140px) {

                position: fixed;
                top: 90svh;
                left: 20px;
                background-color: var(--white);
                color: var(--dark);
                border: none !important;
            }
        }


        .text-wrapper {
            flex: 1 1 auto;
            position: relative;
            scroll-timeline: --page-scroll block;
            color: var(--white);
            overflow: scroll;
            gap: 3.2vw;
            background: var(--dark);
            padding: 0 4vw 4vw 3.2vw;



            & .text {
                flex: 1 1 auto;
                margin-top: 40vh;
            }

            & .meta-data {
                font-size: var(--font-size-6);
                line-height: 1.6;
                font-family: var(--font-sans);
                margin-bottom: 32px;
                //max-width: 72ch;
            }

            & .label {
                font-family: var(--font-sans);
                font-size: var(--font-size-11);
                color: var(--green);
                font-weight: 500;
                margin-bottom: 8px;
            }

            & ol {
                font-size: var(--font-size-6);
                font-family: var(--font-sans);

                & li {
                    margin-bottom: 8px;

                    &:last-child {
                        margin-bottom: 32px;
                    }
                }

                & li:has(iframe) > * {
                    list-style-type: none;
                    padding-left: 0;
                    margin-left: -6%;
                    margin-top: 2%;
                }
            }

            & ul {
                margin-top: 12px;
                padding-left: 16px;
                font-family: var(--font-sans);

                &:last-child {
                    margin-bottom: 32px;
                }
            }

            iframe {
                width: 112%;
                height: 64vh;
                border: none;
                margin-bottom: 12px;
                margin-left: -6%;
                margin-top: 2%;
            }

            .background {
                position: absolute;
                background: var(--image) center/cover;
                width: 100%;
                height: 32vh;
                top: 0;
                left: 0;

            }
        }

        #index {
            display: block;
            margin: initial;
            height: 80%;
            flex: 1 0 36ch;
            position: static;
            padding: 24px 36px 24px 28px;
            border: none;
            background: var(--dark);
            color: rgba(255, 255, 255, 0.76) !important;
            overflow: auto;

            & .section,
            & .subsection {
                margin-bottom: 24px;
                animation: fadeIn 0.4s ease-out forwards;

                &:last-child {
                    margin-bottom: 0;
                }
            }

            & .subsection {
                margin-left: 12px;
            }

            & .title {
                font-size: var(--font-size-10);
                font-weight: 500;
                margin-bottom: 24px;
                transition: transform 0.4s ease;
                font-family: var(--font-sans);
            }

            & .subtitle {
                text-decoration: none;
                color: rgba(125, 250, 0, 0.80);

                line-height: 2;
                font-size: var(--font-size-7);
                transition: transform 0.3s ease;
                font-family: var(--font-sans);

                &:hover {
                    color: var(--green);
                    scale: 1.05;
                    cursor: pointer;
                }
            }

            & .paragraph {
                font-size: var(--font-size-2);
                line-height: 1.6;
                margin-bottom: 16px;
                font-family: var(--font-mono);
                //display: -webkit-box;
                //-webkit-box-orient: vertical;
                //-webkit-line-clamp: 2;
                //overflow: hidden;
                text-wrap: pretty;
                white-space: wrap;
            }

            & ul {
                font-size: var(--font-size-3);
                line-height: 1.4;
                padding-left: 16px;
                margin: 0;
                font-family: var(--font-mono);

                & li {
                    margin-bottom: 4px;
                }

                &:last-child {
                    margin-bottom: 32px;
                }
            }


        }


        .toggle-button {
            display: none;
        }

        @keyframes fadeIn {
            from {
                opacity: 0;
                transform: translateY(20px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        @media (width <= 906px) {
            #index {
                display: none;

                &[popover] {
                    margin: auto;
                    margin-bottom: 16px;
                    width: 72%;
                    border-radius: 4px;
                    box-shadow: 0 10px 15px -3px rgb(0 0 0 / 0.1),
                    0 4px 6px -4px rgb(0 0 0 / 0.1);
                }

                &[popover]:popover-open {
                    display: block;
                    max-height: 82vh;
                    background: var(--dark);
                }

                &[popover]::backdrop {
                    background: rgb(0 0 0 / 0.75);
                    backdrop-filter: grayscale(80%) brightness(80%);
                }

                & .paragraph {
                   font-size: var(--font-size-3);
                }


            }

            .toggle-button {
                position: fixed;
                top: 90svh;
                right: 24px;
                display: block;
                font-size: var(--font-size-6);
                background-color: var(--green);
                color: var(--dark);
                padding: 12px 24px;
                border-radius:8px;
                border: none;
                box-shadow: 0 2px 8px rgba(var(--green), 0.25);
                cursor: pointer;
                transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1),
                box-shadow 0.3s cubic-bezier(0.4, 0, 0.2, 1);
                popover-target: index;

                &:hover {
                    box-shadow: 0 4px 16px rgba(var(--green), 0.4),
                    0 0 8px rgba(var(--green), 0.2);
                }

                &:active {
                    box-shadow: 0 1px 4px rgba(var(--green), 0.3);
                }

                &:focus-visible {
                    outline: 2px solid rgba(var(--green), 0.5);
                    outline-offset: 2px;
                }
            }
        }

        .padding {

            @media (width <= 1336px) {
                margin: 3rem 6vw;
            }
            @media (1336px < width) {
                margin: 3rem 8vw;
            }
        }


    </style>
</head>
<body class="padding">
<button class="back-button" aria-label="Go back" onclick="window.location.href='/2024#Projects'">
    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
        <path d="M15 18l-6-6 6-6"/>
    </svg>
</button>
<div class="text-wrapper">
    <div id="green" class="green"></div>


    <div class="text">
        <div class="background"></div>
        <>
            {
                Object.entries(Description).map(([key, value]) => (
                        <>
                            <div class="label" id={key}>
                                {key}
                            </div>
                            {typeof value === "object" ? (
                                    <ol>
                                        {Object.keys(value).map((k) => (
                                                <li>
                                                    {k}: {value[k]}
                                                </li>
                                        ))}
                                    </ol>
                            ) : (
                                    <div class="meta-data">{value}</div>
                            )}
                        </>
                ))
            }
        </>
        <>
            {
                Object.entries(DesignProcess).map(([key, value]) => (
                        <>
                            <div class="label" id={key}>
                                {key}
                            </div>
                            {typeof value === "object" ? (
                                    <ol>
                                        {Object.keys(value).map((k) => (
                                                <li>
                                                    {k}:
                                                    {typeof value[k] === "object" ? (
                                                            <ul>
                                                                {Object.keys(value[k]).map((nestedKey) => (
                                                                        <>
                                                                            {nestedKey == "Link" ? (
                                                                                    <iframe
                                                                                            allowfullscreen
                                                                                            src={value[k][nestedKey]}
                                                                                    />
                                                                            ) : (
                                                                                    <li>{value[k][nestedKey]}</li>
                                                                            )}
                                                                        </>
                                                                ))}
                                                            </ul>
                                                    ) : (
                                                        value[k]
                                                    )}
                                                </li>
                                        ))}
                                    </ol>
                            ) : (
                                    <div class="meta-data">{value}</div>
                            )}
                        </>
                ))
            }
        </>
        <>
            {
                Object.entries(Features).map(([key, value]) => (
                        <>
                            <div class="label" id={key}>
                                {key}
                            </div>
                            <div class="meta-data">
                                {Object.keys(value).map((nestedKey) =>
                                    nestedKey === "Link" ? (
                                            <iframe allowFullScreen src={value[nestedKey]}/>
                                    ) : (
                                            <>{value[nestedKey]}</>
                                    ),
                                )}
                            </div>
                        </>
                ))
            }
        </>
    </div>

</div>
<div id="index" popover="auto">
    {
        Object.entries(Index).map(([key, value], index) => (
                <div class="section">
                    <div class="title">
                        {key}</div>
                    {typeof value === "object" && value !== null ? (
                        Object.entries(value).map(
                            ([nestedKey, nestedValue], nestedIndex) => (
                                    <div class="subsection">
                                        <a class="subtitle" href=`#${nestedKey}`>{nestedKey}</a>
                                        {typeof nestedValue === "object" && nestedValue !== null ? (
                                                <ul>
                                                    {Object.keys(nestedValue).map((deepKey) => (
                                                            <li key={deepKey}>{deepKey}</li>
                                                    ))}
                                                </ul>
                                        ) : (
                                                <div class="paragraph">{nestedValue}</div>
                                        )}
                                    </div>
                            ),
                        )
                    ) : (
                            <a class="subtitle" href=`#${value}`>{value}</a>
                    )}
                </div>
        ))
    }
</div>
<button class="toggle-button" popovertarget="index"> Index</button>

<svg xmlns="http://www.w3.org/2000/svg" style="display: none;">
    <filter id="blur-filter" x="0" y="0" width="100%" height="100%">
        <feGaussianBlur in="SourceGraphic" stdDeviation="10" />
    </filter>
</svg>

</body>

</html>
